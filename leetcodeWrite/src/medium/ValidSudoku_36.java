package medium;
/**
 * 36. 有效的数独
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ['5','3','.','.','7','.','.','.','.'],
  ['6','.','.','1','9','5','.','.','.'],
  ['.','9','8','.','.','.','.','6','.'],
  ['8','.','.','.','6','.','.','.','3'],
  ['4','.','.','8','.','3','.','.','1'],
  ['7','.','.','.','2','.','.','.','6'],
  ['.','6','.','.','.','.','2','8','.'],
  ['.','.','.','4','1','9','.','.','5'],
  ['.','.','.','.','8','.','.','7','9']
]
输出: true
示例 2:

输入:
[
  ['8','3','.','.','7','.','.','.','.'],
  ['6','.','.','1','9','5','.','.','.'],
  ['.','9','8','.','.','.','.','6','.'],
  ['8','.','.','.','6','.','.','.','3'],
  ['4','.','.','8','.','3','.','.','1'],
  ['7','.','.','.','2','.','.','.','6'],
  ['.','6','.','.','.','.','2','8','.'],
  ['.','.','.','4','1','9','.','.','5'],
  ['.','.','.','.','8','.','.','7','9']
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。
 * @author liang
 *
 */
public class ValidSudoku_36 {

	/**
	 * 最直观的思路，行  列 九宫格依次判断，每个判断用一个数组保存已有数据
	 * @param board
	 * @return
	 */
    public static boolean isValidSudoku(char[][] board) {
    	
        for(int i =0 ;i<9;i++) {
        	boolean[] row_numbers = new boolean[10];//用于保存每次判断行重复的数据，比如存在2，就在row[2]=true
        	boolean[] colum_numbers = new boolean[10];//保存列重复的数据
        	for(int j= 0;j<9;j++) {
        		if(board[i][j]!='.') {//判断行是否存在重复数据
        			if(row_numbers[board[i][j]-'0']) {
        				System.out.println(i+" 1 "+j);
        				return false;
        			}
        			row_numbers[board[i][j]-'0'] = true;
        		}
        		if(board[j][i]!='.') {//判断列是否存在
        			if(colum_numbers[board[j][i]-'0']) {
        				System.out.println(i+" 2 "+j);
        				return false;
        			}
        			colum_numbers[board[j][i]-'0'] = true;        			
        		}
        	}
        }
        //判断九宫格
        for(int i=0;i<3;i++) {//九宫格行3个 列3个
        	for(int j =0;j<3;j++) {
        		boolean[] numbers = new boolean[10];
        		for(int row = 3*i;row<3*i+3;row++) {
        			for(int colum = 3*j;colum<3*j+3;colum++) {
        				if(board[row][colum]!='.') {
        					if(numbers[board[row][colum]-'0']) {
        						System.out.println(i+" 3 "+j);
        						return false;
        					}
        					numbers[board[row][colum]-'0'] = true;
        				}
        			}
        		}
        	}
        }
        return true;
    }
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		char[][] row  = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		System.out.println(isValidSudoku(row));
	}

}
