package medium;
/**
 * 319. 灯泡开关
初始时有 n 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。

示例:

输入: 3
输出: 1 
解释: 
初始时, 灯泡状态 [关闭, 关闭, 关闭].
第一轮后, 灯泡状态 [开启, 开启, 开启].
第二轮后, 灯泡状态 [开启, 关闭, 开启].
第三轮后, 灯泡状态 [开启, 关闭, 关闭]. 

你应该返回 1，因为只有一个灯泡还亮着。
 * @author liang
 *
 */
public class BulbSwitcher_319 {

	/**
	 * 看每个位置是否是被变化了奇数次。比如对于6，可以写成1x6、2x3，那么经过整个n次变化，这个位置经历了4次变化，所以是灭的状态；而9可以写成1x9、3x3，那么其经过3次变化，所以是点亮的状态；顺着这个思路，能够开方为整数的数字都是点亮的状态，所以只需要对整个n开方，然后向下取整即可。
	 * @param n
	 * @return
	 */
    public int bulbSwitch(int n) {
    	return (int)Math.sqrt(n);
    }
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
